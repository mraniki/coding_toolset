
name: üì¶Release

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      settings_publish:
        required: false
        type: string
        default: true
      settings_token:
        required: false
        type: string
        default: '.'
      pypi_publish:
        required: false
        type: string
        default: true


jobs:

  secrets:
    name: üîíÔ∏è Retrieve Secrets
    runs-on: ubuntu-latest
    outputs:
      OP_SERVICE_ACCOUNT_TOKEN: "${{ steps.secrets.outputs.OP_SERVICE_ACCOUNT_TOKEN }}"
      TOKEN: "${{ steps.secrets.outputs.TOKEN }}"
      PYPI_API_TOKEN: "${{ steps.secrets.outputs.PYPI_API_TOKEN }}"

    steps:
      - name: üîíÔ∏è Install 1Password CLI
        uses: 1password/install-cli-action@v1
  
      - name: üîíÔ∏è Load credentials
        uses: 1password/load-secrets-action@v1
        id: op-load-secrets
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TOKEN: "op://git/GITHUB/TOKEN"
          PYPI_API_TOKEN: "op://git/PYPI_API_TOKEN/password"

  release:
    name: Versioning and Release
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    needs: [secrets]
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
        id-token: write
        contents: write

    steps:
      - name: üì• Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.6"

      - name: üîñ Semantic Version and Release
        id: release
        continue-on-error: true
        env:
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        run: |
          python -m pip install --upgrade --disable-pip-version-check pip
          pip install poetry
          poetry install --with dev
          poetry run semantic-release version --print

          echo "version in pyproject.toml before updating:"
          poetry version  #show version

          # update pypoetry.toml with the $new_version from semantic-release
          poetry version $new_version
          NEWTAG=$(poetry version $new_version)
          echo "$NEWTAG"
          echo "version in pyproject.toml after updating:"
          poetry version  #show version

          # build the package for release
          poetry build

          echo "git push the new tag:"
          git push
          
      - name: ‚õ¥Ô∏è Upload to PyPI via Twine
        if: ${{github.event.inputs.pypi_publish}} == 'true'
        continue-on-error: true
        env:
          TWINE_PASSWORD: ${{ needs.secrets.outputs.PYPI_API_TOKEN }}
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        run: |
          python -m pip install --upgrade pip twine
          twine upload --verbose -u '__token__' dist/*

      - name: ü¶ë Publish package to GitHub Release
        uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ needs.secrets.outputs.TOKEN }}

      - name: ‚õô Rebase Dev Branch
        uses: robotology/gh-action-nightly-merge@v1.4.0
        with:
          stable_branch: 'main'
          development_branch: 'dev'
          allow_ff: true
