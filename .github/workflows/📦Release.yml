
name: 📦Release

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      settings_publish:
        required: false
        type: string
        default: true
      settings_token:
        required: false
        type: string
        default: '.'
      pypi_publish:
        required: false
        type: string
        default: true


jobs:

  release:
    name: Versioning and Release
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
        id-token: write
        contents: write

    steps:
      - name: 🔒️ Install 1Password CLI
        uses: 1password/install-cli-action@v1
  
      - name: 🔒️ Load credentials
        uses: 1password/load-secrets-action@v2
        id: secrets
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TOKEN: "op://git/GITHUB/TOKEN"
          PYPI_API_TOKEN: "op://git/PYPI_API_TOKEN/password"
      - name: 📥 Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.secrets.outputs.TOKEN }}
          
      - name: 🐍 Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # - name: 🔖 Semantic Version and Release
      #   id: release
      #   continue-on-error: true
      #   env:
      #     GH_TOKEN: ${{ steps.secrets.outputs.TOKEN }}
      #   run: |
      #     python -m pip install --upgrade --disable-pip-version-check pip
      #     pip install poetry
      #     poetry install --with dev
      #     poetry run semantic-release version --print

      - name: 🔖 Semantic Version and Release
        uses: python-semantic-release/python-semantic-release@v10.1.0

        with:
          github_token: ${{ steps.secrets.outputs.TOKEN }}

      - name: ⛴️ Upload to PyPI via Twine
        if: ${{github.event.inputs.pypi_publish}} == 'true' && ${{ steps.release.outputs.released }} == 'true'
        continue-on-error: true
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ steps.secrets.outputs.PYPI_API_TOKEN }}
          GH_TOKEN: ${{ steps.secrets.outputs.TOKEN }}
        run: |
          python -m pip install --upgrade pip twine
          twine upload --verbose dist/*

      - name: 🦑 Publish package to GitHub Release
        uses: python-semantic-release/upload-to-gh-release@main
        continue-on-error: true
        with:
          github_token: ${{ steps.secrets.outputs.TOKEN }}

      - name: ⛙ Rebase Dev Branch from Main
        continue-on-error: true
        run: |
          git fetch origin
          git checkout dev
          git rebase origin/main
          git push origin dev --force
        env:
          GITHUB_TOKEN: ${{ steps.secrets.outputs.TOKEN }}

  
      # - name: ⛙ Enable Pull Request Automerge
      #   if: ${{github.event_name == 'pull_request'}}
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh pr merge --merge --auto ${{ github.event.number }}