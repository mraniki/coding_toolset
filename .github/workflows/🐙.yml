
name: 🐙Reusable CI/CD

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      repo:
        required: false
        type: string
        default: dev
      pypi_publish:
        required: false
        type: string
        default: true
      gitlab_mirror:
        required: false
        type: string
        default: true
      codeberg_mirror:
        required: false
        type: string
        default: true
      docker_image:
        required: false
        type: string
        default: false

jobs:

  precommit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Control
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --config .github/.pre-commit-config.yaml
  
      - name: Job Info
        if: success()
        run: |
          echo "pre-check is successful."
          echo workspace is: ${{ github.workspace }}
          echo "is workflow_dispatch event? ${{ github.event_name == 'workflow_dispatch' }}"
          echo "is push event? ${{ github.event_name == 'push' }}"
          echo "is pull request event? ${{ github.event_name == 'pull_request' }}"
          echo "pull_request.head.ref is: ${{ github.event.pull_request.head.ref }}"
          echo "github.ref_name is: ${{ github.ref_name }}"
          echo "github.ref is: ${{ github.ref }}"
          echo "github.head_ref is: ${{ github.head_ref }}"
          echo "pypi_publish? ${{ github.event.inputs.pypi_publish }}"

  secrets:
    needs: [precommit]
    runs-on: ubuntu-latest
    outputs:
      OP_SERVICE_ACCOUNT_TOKEN: "${{ steps.secrets.outputs.OP_SERVICE_ACCOUNT_TOKEN }}"
      TOKEN: "${{ steps.secrets.outputs.TOKEN }}"
      PYPI_API_TOKEN: "${{ steps.secrets.outputs.PYPI_API_TOKEN }}"
      DOCKER_USERNAME: "${{ steps.secrets.outputs.DOCKER_USERNAME }}"
      DOCKER_HUB_ACCESS_TOKEN: "${{ steps.secrets.outputs.DOCKER_HUB_ACCESS_TOKEN }}"
      GITLAB: "${{ steps.secrets.outputs.GITLAB }}"
      CODEBERG: "${{ steps.secrets.outputs.CODEBERG }}"
      SETTINGS_LOCATION: "${{ steps.secrets.outputs.SETTINGS_LOCATION }}"

    steps:
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
  
      - name: Load credentials
        uses: 1password/load-secrets-action@v1
        id: op-load-secrets
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          SETTINGS_LOCATION: "op://git/SETTINGS/${{inputs.repo}}"
          TOKEN: "op://git/GITHUB/TOKEN"
          PYPI_API_TOKEN: "op://git/PYPI_API_TOKEN/password"
          DOCKER_USERNAME: "op://git/DOCKERHUB/DOCKER_USERNAME"
          DOCKER_HUB_ACCESS_TOKEN: "op://git/DOCKERHUB/password"
          GITLAB: "op://git/GITLAB/key"
          CODEBERG: "op://git/CODEBERG/key"

  buildntest:

    needs: [precommit, secrets]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
        include:
          - experimental: true
          - check-latest: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: ${{ matrix.experimental }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          python -m pip install --upgrade pip twine
          pip install poetry
          poetry install

      - name: Build package
        run: |
          poetry build

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Get Settings
        run: |
          echo "op read op://git/SETTINGS/${{inputs.repo}}" >> "$SETTINGS"
          op read "$SETTINGS" > settings.toml
        working-directory: .
        env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      
      - name: Test with pytest
        run: poetry run pytest -v --cov . --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  pullrequest:
    outputs:
      version: ${{ steps.semantic.outputs.tag }}
    needs: [precommit, secrets, buildntest]
    #if: contains(github.event.pull_request.labels.*.name, '<label_name>')
    if: ${{ github.ref == 'refs/heads/dev'}} && ${{github.event_name != 'pull_request'}}
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: write
        pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checks
        env:
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        id: check
        run: |
          pr_title="Update.${{ needs.secrets.outputs.tag }}"
          base_branch=main
          echo "::set-output name=diff::$(git diff --name-only | wc -l)"
          echo "::set-output name=count::$(gh pr list -S ${pr_title}' in:title' -B $base_branch | wc -l)"
          echo "::set-output name=pr_title::$pr_title"
          echo "::set-output name=base_branch::$base_branch"
      - name: Push branch
        if: ${{ steps.check.outputs.count == 0 && steps.check.outputs.diff > 0 }}
        env:
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        run: |

            git config user.email "action@github.com"
            git config user.name "GitHub Action"

            pip install --upgrade pip

            pip install poetry
            poetry install --with dev

      - name: Update Version
        id: semantic
        env:
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        run: |
            poetry run semantic-release -vv version --print
            cat $GITHUB_OUTPUT
      - name: Save artefact
        uses: actions/upload-artifact@v3
        with:
          path: /dist

      - name: Create Commit and PR
        env:
          GH_TOKEN: ${{ needs.secrets.outputs.TOKEN }}
        run: |

            poetry lock
            poetry export --without-hashes --format=requirements.txt > requirements.txt
            cp requirements.txt .requirements/requirements.txt

            git add .

            git commit -m "⬆️ Update Requirements and Version"
            
            git push

            gh pr create --title "⬆️ 🤖 - Auto Release" \
                         --base "main" \
                         --head "dev" \
                         --body "Auto Release"

            gh pr merge --merge --auto ${{ github.event.number }}

      - name: Save artefact
        uses: actions/upload-artifact@v3
        with:
          path: /dist


  release:
    needs: [precommit, secrets, buildntest, pullrequest]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
        id-token: write
        contents: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ needs.secrets.outputs.TOKEN }}

      - name: Set up latest Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install latest pip, build, twine
        run: |
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine
    
      - name: Download the artefact
        uses: actions/download-artifact@v3
        with:
          path: dist/

      - name: Upload to PyPI via Twine
        if: ${{github.event.inputs.pypi_publish}} == 'true'
        continue-on-error: true
        env:
          TWINE_PASSWORD: ${{ needs.secrets.outputs.PYPI_API_TOKEN }}
        run: twine upload --verbose -u '__token__' dist/*

      - name: Upload package to GitHub Release
        uses: python-semantic-release/upload-to-gh-release@main
        if: ${{ needs.secrets.outputs.released }} == 'true'
        with:
          github_token: ${{ needs.secrets.outputs.TOKEN }}

      - name: Mirror to Codeberg
        uses: pixta-dev/repository-mirroring-action@v1
        if: ${{ github.ref == 'refs/heads/main'}} && ${{ github.event_name == 'push' }} && ${{github.event.inputs.codeberg_mirror }} == 'true'
        with:
          target_repo_url: git@codeberg.org:${{ github.repository }}.git
          ssh_private_key: ${{ needs.secrets.outputs.CODEBERG }}

      - name: Mirror to Codeberg
        uses: pixta-dev/repository-mirroring-action@v1
        if: ${{ github.ref == 'refs/heads/main'}} && ${{ github.event_name  }}== 'push' && ${{github.event.inputs.gitlab_mirror }} == 'true'
        with:
          target_repo_url: git@gitlab.com:${{ github.repository }}.git
          ssh_private_key: ${{ needs.secrets.outputs.GITLAB }}

  docker:
    needs: [secrets, release]
    if: ${{github.event.inputs.docker_image }} == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare docker image name
        id: image_names
        run: |
          IMAGES="${GITHUB_REPOSITORY/docker-/},ghcr.io/${GITHUB_REPOSITORY/docker-/}"
          echo "docker_images=$IMAGES" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ needs.secrets.outputs.DOCKER_USERNAME }}
          password: ${{ needs.secrets.outputs.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to the ghcr registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker latest
        uses: docker/metadata-action@v5
        id: meta
        with:
          images:  ${{ env.docker_images }}
          tags: latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: .registry/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}